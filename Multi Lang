const handleCancel = async () => {
  const userConfirmed = window.confirm("Are you sure you want to cancel the process?");
  if (!userConfirmed) return;

  setIsCancelling(true);
  setLogs(prevLogs => [...prevLogs, "Cancelling..."]);

  // Wait for 2 seconds before proceeding with cancellation
  setTimeout(() => {
    if (intervalId) {
      clearInterval(intervalId);
      setIntervalId(null);
    }

    // Simulate backend cancellation process
    setLogs(prevLogs => [...prevLogs, "Reconciliation process cancelled."]);
    setProgress(0);
    setIsCancelVisible(false);
    setDisabled(false);
    setIsCancelling(false); // Reset the cancelling state

    // Poll the logs for the "Cancelled" message
    const checkCancelled = () => {
      const latestLog = logs[logs.length - 1]; // Get the latest log entry
      if (latestLog === "Reconciliation process cancelled.") {
        setIsCancelVisible(false);
        setDisabled(false); // Re-enable the Reconcile button
      } else {
        setTimeout(checkCancelled, 1000); // Check again after 1 second
      }
    };

    checkCancelled();
  }, 2000); // 2 seconds delay
};
