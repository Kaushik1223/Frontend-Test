const handleCancel = async () => {
  const userConfirmed = window.confirm("Do you want to cancel?");
  if (!userConfirmed) return;

  setIsCancelling(true);
  setLogs(prevLogs => [...prevLogs, "Cancelling..."]);
  setIsCancelVisible(false);

  try {
    // Initiate the cancellation process
    await axios.get(`${config.apiBaseUrl}${config.routes.cancel_seq}`);

    // Poll the logs to check for the cancellation message
    checkCancellationStatus();
  } catch (error) {
    console.error("There was an error!", error);
    setLogs(prevLogs => [...prevLogs, "Error occurred while cancelling."]);
    setIsReconcileVisible(true);
    setDisabled(false);
    setIsCancelling(false);
  }
};

const checkCancellationStatus = () => {
  const interval = setInterval(() => {
    const logContainsCancelled = events.some(event => event.message.includes("Reconciliation process cancelled."));
    if (logContainsCancelled) {
      clearInterval(interval);
      setIsReconcileVisible(true);
      setDisabled(false);
      setIsCancelling(false);
    }
  }, 1000); // Check every 1 second
};
