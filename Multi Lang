const handleCancel = async () => {
  const userConfirmed = window.confirm("Are you sure you want to cancel the process?");
  if (!userConfirmed) return;

  setIsCancelling(true);
  setLogs(prevLogs => [...prevLogs, "Cancelling..."]);

  // Function to poll for "Cancelled" status
  const pollForCancellation = async () => {
    try {
      const response = await fetch(`${config.apiBaseUrl}${config.routes.progress_log_seq}`);
      const result = await response.json();

      // Check if the message "Cancelled" is in the logs
      if (result.logs.some(event => event.message === "Cancelled")) {
        clearInterval(pollInterval); // Stop polling
        setLogs(prevLogs => [...prevLogs, "Reconciliation process cancelled."]);
        setProgress(0);
        setIsCancelVisible(false);
        setDisabled(false);
        setIsCancelling(false); // Reset the cancelling state
      }
    } catch (error) {
      console.error("There was an error!", error);
    }
  };

  // Start polling every 2 seconds
  const pollInterval = setInterval(pollForCancellation, 2000);

  // Send the cancel request to the backend
  try {
    await fetch(`${config.apiBaseUrl}${config.routes.cancel_seq}`);
  } catch (error) {
    console.error("There was an error cancelling the process!", error);
  }
};
