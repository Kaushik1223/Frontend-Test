import React, { useState } from 'react';
import PDFMerger from 'pdf-merger-js';
import uploadIcon from '../assets/upload-icon.png'; // Update with your actual path
import { MdOutlineCancel } from "react-icons/md";
import { useTranslation } from 'react-i18next';

const FileUpload = ({ name, value, onFileSelect, onFileUpload, disabled }) => {
  const [selectedFiles, setSelectedFiles] = useState([]);
  const [mergedPdf, setMergedPdf] = useState(null);
  const { t } = useTranslation();

  const handleFileChange = (event) => {
    const files = Array.from(event.target.files);
    const pdfFiles = files.filter(file => file.type === 'application/pdf');

    if (pdfFiles.length > 0) {
      setSelectedFiles(pdfFiles);
      onFileSelect(value, pdfFiles);
    } else {
      alert('Only PDF files are allowed.');
    }
  };

  const handleMergeClick = async () => {
    const merger = new PDFMerger();

    for (const file of selectedFiles) {
      merger.add(file);
    }

    try {
      const mergedPdfBlob = await merger.saveAsBlob();
      setMergedPdf(mergedPdfBlob);
      onFileUpload(value, mergedPdfBlob); // Upload the merged PDF
    } catch (error) {
      console.error('Error merging PDFs:', error);
    }
  };

  const removeFile = (fileIndex) => {
    const newSelectedFiles = [...selectedFiles];
    newSelectedFiles.splice(fileIndex, 1);
    setSelectedFiles(newSelectedFiles);
    onFileSelect(value, newSelectedFiles);
  };

  return (
    <div className="file-upload">
      <label htmlFor={`file-input-${value}`} className="file-label">
        <h3>{name}</h3>
        <div className="file-input-container">
          <img src={uploadIcon} alt="Upload Icon" className="upload-icon" />
          <span className="file-input-overlay">
            {t('fileUpload.dragDrop')} <span className="browse">{t('fileUpload.browse')}</span>
          </span>
          <input
            type="file"
            id={`file-input-${value}`}
            className="file-input"
            accept=".pdf"
            onChange={handleFileChange}
            disabled={disabled}
            multiple
            style={{ display: 'none' }}
          />
          <p className="file-support">Only PDF files are allowed.</p>
        </div>
      </label>
      
      <div className="merge-section">
        <button onClick={handleMergeClick} className="merge-button" disabled={disabled}>Merge PDFs</button>
        {mergedPdf && <p>Merged PDF ready to upload.</p>}
      </div>

      {selectedFiles.length > 0 && (
        <div className="selected-files">
          <h4>Selected Files:</h4>
          <ul>
            {selectedFiles.map((file, index) => (
              <li key={index}>
                {file.name} <button onClick={() => removeFile(index)} disabled={disabled}><MdOutlineCancel /></button>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

export default FileUpload;
