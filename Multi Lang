const handleCancel = async () => {
  const userConfirmed = window.confirm("Are you sure you want to cancel the process?");
  if (!userConfirmed) return;

  setIsCancelling(true);
  setLogs(prevLogs => [...prevLogs, "Cancelling..."]);

  // Function to check for "Cancelled" status in the logs
  const checkCancellationStatus = () => {
    const latestLog = logs[logs.length - 1]; // Get the latest log entry

    if (latestLog === "Cancelled") {
      clearInterval(pollInterval); // Stop polling
      setLogs(prevLogs => [...prevLogs, "Reconciliation process cancelled."]);
      setProgress(0);
      setIsCancelling(false); // Reset the cancelling state
      setIsCancelVisible(false); // Hide the Cancel button
      setDisabled(false); // Re-enable the Reconcile button
    }
  };

  // Start polling the logs every 2 seconds
  const pollInterval = setInterval(checkCancellationStatus, 2000);

  // Send the cancel request to the backend
  try {
    await fetch(`${config.apiBaseUrl}${config.routes.cancel_seq}`);
  } catch (error) {
    console.error("There was an error cancelling the process!", error);
    // If there is an error, stop the polling and reset UI state
    clearInterval(pollInterval);
    setIsCancelling(false);
    setIsCancelVisible(false);
    setDisabled(false);
  }
};
