import React, { useState, useEffect, useRef } from 'react';
import config from './configs/config.json';

import Navbar from './components/Navbar';
import FileUpload from './components/FileUpload';
import ReconcileButton from './components/ReconcileButton';
import Footer from './components/Footer';
import TextContainer from './components/TextContainer';
import ShowResultButton from './components/ShowResultButton';
import Modal from './components/Modal';
import LogOffModal from './components/LogOffModal';
import ProgressBar from './components/ProgressBar';
import ProgressLog from './components/ProgressLog';
import './App.css';

function App() {
  const [showModal, setShowModal] = useState(false);
  const [files, setFiles] = useState({});
  const [message, setMessage] = useState('');
  const [intervalId, setIntervalId] = useState(null);
  const [disabled, setDisabled] = useState(false);
  const [isCancelVisible, setIsCancelVisible] = useState(false);
  const [isShowResultModalOpen, setIsShowResultModalOpen] = useState(false);
  const [resultContent, setResultContent] = useState("Reconciliation result goes here...");
  const [logs, setLogs] = useState([
    "10% completed...", "20% completed...", "30% completed...", "40% completed...", "Reconciliation is done now."
  ]);
  const [events, setEvents] = useState([]);
  const [progress, setProgress] = useState(0);
  const eventSourceRef = useRef(null);

  useEffect(() => {
    return () => {
      if (eventSourceRef.current) {
        eventSourceRef.current.close();
      }
    };
  }, []);

  useEffect(() => {
    if (progress === 100 && intervalId) {
      clearInterval(intervalId);
      setIsCancelVisible(false);
      setDisabled(false); // Re-enable the file inputs here
    }
  }, [progress, intervalId]);

  const handleShowResult = async () => {
    try {
      const response = await fetch(`${config.apiBaseUrl}${config.routes.show_result}`);
      const data = await response.json();
      setMessage(data.data);
      setShowModal(true);
    } catch (error) {
      console.error('Error fetching message:', error);
    }
  };

  const closeModal = () => setShowModal(false);

  const [isLogOffModalOpen, setIsLogOffModalOpen] = useState(false);

  const handleLogOff = () => {
    setIsLogOffModalOpen(true);
  };

  const handleFileSelect = (value, file) => {
    setFiles((prevFiles) => ({
      ...prevFiles,
      [value]: file,
    }));
  };

  const handleClick = async () => {
    setEvents([]);
    setProgress(0);

    if (!files.Upload_Invoice || !files.Upload_Confirmation) {
      alert("Please select both files before reconciling");
      return;
    }

    const formData = new FormData();
    for (const [key, value] of Object.entries(files)) {
      if (value) {
        formData.append(key, value);
      }
    }

    try {
      const response = await fetch(`${config.apiBaseUrl}${config.routes.uploader}`, {
        method: "POST",
        body: formData,
      });
      if (response.ok) {
        const result = await response.json();
        alert("Files Upload Successful!");
        setDisabled(true);
        setIsCancelVisible(true);
      } else {
        alert("Error uploading files.");
      }
    } catch (error) {
      alert("Error uploading files:", error);
    }

    const eventSource = new EventSource(`${config.apiBaseUrl}${config.routes.start_seq}`);
    eventSourceRef.current = eventSource;

    eventSource.onmessage = function (event) {
      const newEvent = JSON.parse(event.data);
      setEvents((prevEvents) => [...prevEvents, newEvent]);
      if (newEvent.progress !== undefined) {
        setProgress(newEvent.progress);
      }
    };

    eventSource.onerror = function () {
      eventSource.close();
      eventSourceRef.current = null;
    };
  };

  const handleSignIn = () => {
    setIsLogOffModalOpen(false);
  };

  const handleReconcile = () => {
    handleClick();
  };

  const handleCancel = async () => {
    if (intervalId) {
      clearInterval(intervalId);
      setIntervalId(null);
    }
    setLogs((prevLogs) => [...prevLogs, "Reconciliation process cancelled."]);
    setProgress(0);
    setIsCancelVisible(false);
    setDisabled(false);

    try {
      await fetch(`${config.apiBaseUrl}${config.routes.cancel_seq}`);
    } catch (error) {
      console.error("There was an error!", error);
    }
  };

  return (
    <div className="App">
      <Navbar onLogOff={handleLogOff} />
      <LogOffModal isOpen={isLogOffModalOpen} onClose={handleSignIn} />
      <TextContainer />
      <main className="main-content">
        <div className="upload">
          <FileUpload name="Upload Invoice" value="Upload_Invoice" onFileSelect={handleFileSelect} disabled={disabled} />
          <FileUpload name="Upload Confirmation" value="Upload_Confirmation" onFileSelect={handleFileSelect} disabled={disabled} />
        </div>
        {progress === 0 && <ReconcileButton onClick={handleReconcile} />}
        {progress > 0 && progress < 100 && <ProgressBar progress={progress} max="100" />}
        {isCancelVisible && <button className="cancel-button" onClick={handleCancel}>Cancel</button>}
      </main>
      <div className="result-wrapper">
        <ShowResultButton onClick={handleShowResult} />
      </div>
      <Footer />
      <Modal show={showModal} onClose={closeModal} message={message} />
      <ProgressLog logs={events} />
    </div>
  );
}

export default App;
