// ProgressBar.jsx
import React from 'react';
import './ProgressBar.css';

const ProgressBar = ({ progress }) => {
  return (
    <div className="progress-bar-container">
      <div className="progress-bar" style={{ width: `${progress}%` }}></div>
      {progress < 100 && <p className="loading-text">Loading...</p>}
    </div>
  );
};

export default ProgressBar;

#----------------------

/* ProgressBar.css */
.progress-bar-container {
  width: 100%;
  height: 20px;
  background-color: #e0e0e0;
  border-radius: 10px;
  overflow: hidden;
  margin-top: 20px;
  position: relative;
}

.progress-bar {
  height: 100%;
  background-color: #4caf50;
  width: 0;
  transition: width 0.5s ease-in-out;
  border-radius: 10px;
}

.loading-text {
  position: absolute;
  width: 100%;
  text-align: center;
  top: 25px;
  font-size: 14px;
  color: #333;
}

#----------6-6---------------


// App.jsx
import React, { useState } from 'react';
import Navbar from './components/Navbar';
import FileUpload from './components/FileUpload';
import ReconcileButton from './components/ReconcileButton';
import Footer from './components/Footer';
import TextContainer from './components/TextContainer';
import ShowResultButton from './components/ShowResultButton';
import LogOffModal from './components/LogOffModal';
import ProgressBar from './components/ProgressBar';
import './App.css';

function App() {
  const [isLogOffModalOpen, setIsLogOffModalOpen] = useState(false);
  const [progress, setProgress] = useState(0);

  const handleLogOff = () => {
    setIsLogOffModalOpen(true);
  };

  const handleSignIn = () => {
    setIsLogOffModalOpen(false);
  };

  const handleReconcile = () => {
    setProgress(0); // Reset progress
    let progressValue = 0;
    const interval = setInterval(() => {
      progressValue += 10;
      if (progressValue <= 100) {
        setProgress(progressValue);
      } else {
        clearInterval(interval);
      }
    }, 500);
  };

  return (
    <div className="App">
      <Navbar onLogOff={handleLogOff} />
      <LogOffModal isOpen={isLogOffModalOpen} onClose={handleSignIn} />
      <TextContainer />
      <main className="main-content">
        <div className="upload">
          <FileUpload name="Upload Invoice" />
          <FileUpload name="Upload Confirmations" />
        </div>
        <ReconcileButton onClick={handleReconcile} />
        {progress > 0 && <ProgressBar progress={progress} />}
      </main>
      <div className='result-wrapper'>
        <ShowResultButton />
      </div>
      <Footer />
    </div>
  );
}

export default App;
